#API_TOKEN = "8471456341:AAEWzxu3UH1R9EmSNGDa4mEj_dRKHPyTbzY"
#OWNER_ID = 2039219427  #6187029881 ‚Üê —Ç–≤–æ–π Telegram ID
import asyncio
import json
import os
import random
import string
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties

API_TOKEN = "8471456341:AAEWzxu3UH1R9EmSNGDa4mEj_dRKHPyTbzY"
ADMIN_IDS = [2039219427, 6187029881]

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========
user_states = {}

# ========== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==========
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –û–±—É—á–µ–Ω–∏–µ"), KeyboardButton(text="üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞")],
        [KeyboardButton(text="‚ö†Ô∏è –í–∏–¥—ã —Å–∫–∞–º–∞"), KeyboardButton(text="üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã")],
        [KeyboardButton(text="üßæ –ì–ª–æ—Å—Å–∞—Ä–∏–π"), KeyboardButton(text="üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"), KeyboardButton(text="ü•º –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
)
#–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
# ========== –ü–û–î–ú–ï–ù–Æ –û–ë–£–ß–ï–ù–ò–Ø ==========
education_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ß—Ç–æ —Ç–∞–∫–æ–µ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?")],
        [KeyboardButton(text="–ö–∞–∫ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")],
        [KeyboardButton(text="–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")],
        [KeyboardButton(text="–ö–æ—à–µ–ª—ë–∫")],
        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# ========== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ==========
USERS_FILE = "users.json"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

users_db = load_users()

def generate_password(length=8):
    chars = string.ascii_letters + string.digits
    return ''.join(random.choices(chars, k=length))

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_id = str(message.from_user.id)

    if user_id in users_db and users_db[user_id]["verified"]:
        await message.answer(
            "‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.",
            reply_markup=main_menu_kb
        )
        return

    if user_id not in users_db:
        password = generate_password()
        users_db[user_id] = {
            "password": password,
            "verified": False
        }
        save_users(users_db)

        text = (
            f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n"
            f"üë§ ID: <code>{user_id}</code>\n"
            f"üîë –ü–∞—Ä–æ–ª—å: <code>{password}</code>"
        )
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, text)

        await message.answer(
            "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –í–≤–µ–¥–∏—Ç–µ –≤—ã–¥–∞–Ω–Ω—ã–π –≤–∞–º –ø–∞—Ä–æ–ª—å.",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "‚õî –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.",
            reply_markup=ReplyKeyboardRemove()
        )

@dp.message(Command("menu"))
async def menu_handler(message: Message):
    user_id = str(message.from_user.id)
    
    if user_id not in users_db or not users_db[user_id]["verified"]:
        return await message.answer("‚õî –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_kb
    )

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ï–ù–Æ ==========
@dp.message()
async def message_handler(message: Message):
    user_id = str(message.from_user.id)
    text = message.text

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if user_id not in users_db or not users_db[user_id]["verified"]:
        return await password_handler(message)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üìö –û–±—É—á–µ–Ω–∏–µ":
        user_states[user_id] = "in_education_menu"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—É—á–µ–Ω–∏—è:", reply_markup=education_menu_kb)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—é –æ–±—É—á–µ–Ω–∏—è
    elif user_states.get(user_id) == "in_education_menu":
        if text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
            user_states[user_id] = None
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
        elif text == "–ß—Ç–æ —Ç–∞–∫–æ–µ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?":
            response = (
                "üí∞ <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> ‚Äî —ç—Ç–æ —Ü–∏—Ñ—Ä–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –¥–µ–Ω–µ–≥, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –Ω–∞ –±–∞–∑–µ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. "
                "–û–Ω–∞ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –±–∞–Ω–∫–∞–º–∏ –∏–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞–º–∏.\n\n"
                "üîπ <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
                "- Bitcoin (BTC) ‚Äî –ø–µ—Ä–≤–∞—è –∏ —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è\n"
                "- Ethereum (ETH) ‚Äî —Å —É–º–Ω—ã–º–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º–∏\n"
                "- USDT, USDC ‚Äî ¬´—Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã¬ª, –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–æ–ª–ª–∞—Ä—É\n\n"
                "üìå <i>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:</i>\n"
                "- –ü–µ—Ä–µ–≤–æ–¥–æ–≤\n"
                "- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
                "- –¢–æ—Ä–≥–æ–≤–ª–∏\n"
                "- –£—á–∞—Å—Ç–∏—è –≤ Web3\n\n"
                "üîπ <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω?</b>\n"
                "–≠—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ ¬´—Ü–µ–ø–æ—á–∫–∞ –±–ª–æ–∫–æ–≤¬ª. –ö–∞–∂–¥—ã–π –±–ª–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é "
                "–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º.\n\n"
                "üîπ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
                "- –ü—Ä–æ–∑—Ä–∞—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö\n"
                "- –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—à–ª—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                "- –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∑–∞ —Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç–∏ (—Ç—ã—Å—è—á–∏ —É–∑–ª–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç –¥–∞–Ω–Ω—ã–µ)\n\n"
                "üîπ <b>–í —á—ë–º —Å–º—ã—Å–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç?</b>\n"
                "üîí –°–≤–æ–±–æ–¥–∞ –æ—Ç –±–∞–Ω–∫–æ–≤ –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏–∏\n"
                "üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤\n"
                "üõ† –î–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º Web3-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º\n"
                "üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–ø–µ–∫—É–ª—è—Ü–∏–∏\n"
                "üí° –£—á–∞—Å—Ç–∏–µ –≤ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö (DeFi, DAO)\n\n"
                "üîπ <b>–ß–µ–º –∫–æ–∏–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–æ–∫–µ–Ω–∞?</b>\n"
                "<b>–ö–æ–∏–Ω (coin)</b> ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º –±–ª–æ–∫—á–µ–π–Ω–µ (BTC, ETH, TON)\n"
                "<b>–¢–æ–∫–µ–Ω (token)</b> ‚Äî –≤—ã–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ —á—É–∂–æ–º –±–ª–æ–∫—á–µ–π–Ω–µ (—á–∞—â–µ Ethereum, Arbitrum)\n\n"
                "üìå <b>–¢–∏–ø—ã —Ç–æ–∫–µ–Ω–æ–≤:</b>\n"
                "- Utility (–ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å)\n"
                "- Governance (–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ)\n"
                "- Security (–∫–∞–∫ –∞–∫—Ü–∏–∏)"
            )
            await message.answer(response, reply_markup=education_menu_kb)
        elif text == "–ö–∞–∫ –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É":
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã...", reply_markup=education_menu_kb)
        elif text == "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏":
            await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...", reply_markup=education_menu_kb)
        elif text == "–ö–æ—à–µ–ª—ë–∫":
            response = (
                "üíº <b>–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—ë–∫?</b>\n\n"
                "–≠—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏. –ü–æ —Å—É—Ç–∏ - –≤–∞—à –ª–∏—á–Ω—ã–π –±–∞–Ω–∫ –≤ –º–∏—Ä–µ –∫—Ä–∏–ø—Ç—ã.\n\n"
                "üîπ <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∏–ø—ã –∫–æ—à–µ–ª—å–∫–æ–≤:</b>\n\n"
                "üî• <b>–ì–æ—Ä—è—á–∏–µ –∫–æ—à–µ–ª—å–∫–∏</b> (–æ–Ω–ª–∞–π–Ω, —É–¥–æ–±–Ω—ã–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π):\n"
                "- MetaMask ‚Äî –±—Ä–∞—É–∑–µ—Ä–Ω—ã–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç ETH –∏ —Ç–æ–∫–µ–Ω—ã ERC-20)\n"
                "- Trust Wallet ‚Äî –º–æ–±–∏–ª—å–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–π\n"
                "- Phantom ‚Äî –¥–ª—è Solana –∏ SPL-—Ç–æ–∫–µ–Ω–æ–≤\n"
                "- WalletConnect ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ –¥–ª—è DeFi\n\n"
                "‚ùÑÔ∏è <b>–•–æ–ª–æ–¥–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏</b> (–æ—Ñ—Ñ–ª–∞–π–Ω, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å):\n"
                "- Ledger Nano S/X ‚Äî –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏\n"
                "- Trezor ‚Äî –µ—â—ë –æ–¥–∏–Ω –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç\n"
                "- Paper Wallet ‚Äî —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏\n\n"
                "üîê <b>–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫–æ—à–µ–ª—ë–∫?</b>\n"
                "1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≤–∞–º –±–ª–æ–∫—á–µ–π–Ω—ã\n"
                "2. –†–µ—à–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
                "3. –û—Ü–µ–Ω–∏—Ç–µ —Å—É–º–º—É —Ö—Ä–∞–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã ‚Äî —Ç–æ–ª—å–∫–æ —Ö–æ–ª–æ–¥–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏!)\n\n"
                "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ!</b> –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –Ω–µ –¥–µ–ª–∏—Ç–µ—Å—å seed-—Ñ—Ä–∞–∑–æ–π!"
            )
            await message.answer(response, reply_markup=education_menu_kb)


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    elif text == "üí∞ –°–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∫–∞":
        await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu_kb)
    elif text == "‚ö†Ô∏è –í–∏–¥—ã —Å–∫–∞–º–∞":
        await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu_kb)
    elif text == "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã":
        await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu_kb)
    elif text == "üßæ –ì–ª–æ—Å—Å–∞—Ä–∏–π":
        await message.answer("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=main_menu_kb)
    elif text == "üõ† –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã":
        await message.answer(
        "1. CoinMarketCap\n"
        "coinmarketcap.com\n"
        "–ì–ª–∞–≤–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω, —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω–æ–π –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.\n\n"
        
        "2. CoinGecko\n"
        "coingecko.com\n"
        "–ê–Ω–∞–ª–æ–≥ CoinMarketCap —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏, –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.\n\n"
        
        "3. Etherscan\n"
        "etherscan.io\n"
        "–ë–ª–æ–∫—á–µ–π–Ω-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä –¥–ª—è Ethereum ‚Äî –ø—Ä–æ–≤–µ—Ä—è–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –∞–¥—Ä–µ—Å–∞.\n\n"

        "4. DeBank\n"
        "debank.com\n"
        "–¢–≤–æ–π –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ DeFi-–ø—Ä–æ–µ–∫—Ç–æ–≤, –∑–∞–π–º—ã, —Å—Ç–µ–π–∫–∏–Ω–≥.\n\n"
        
        "5. Uniswap\n"
        "uniswap.org\n"
        "–ü–æ–ø—É–ª—è—Ä–Ω–∞—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ (DEX) –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ Ethereum.\n\n"
        
        "6. MetaMask\n"
        "metamask.io\n"
        "–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è Ethereum –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –±–ª–æ–∫—á–µ–π–Ω–æ–≤.\n\n"

        "7. Zealy\n"
        "zealy.io)\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-–∑–∞–¥–∞–Ω–∏–π, —É—á–∞—Å—Ç–∏—è –≤ airdrop –∏ –ø—Ä–æ–µ–∫—Ç–∞—Ö.\n\n"

        "8. Dextools\n"
        "dextools.io\n"
        "–ê–Ω–∞–ª–∏–∑ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö.\n\n"

        "9. Galxe\n"
        "galxe.com\n"
        "–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ (airdrop, NFT).\n\n"

        "10. Ledger Live\n"
        "ledger.com/live\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –Ω–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö Ledger.\n\n"

        "11. Trust Wallet\n"
        "trustwallet.com\n"
        "–ú–æ–±–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –±–ª–æ–∫—á–µ–π–Ω–æ–≤ –∏ —Ç–æ–∫–µ–Ω–æ–≤.\n\n"
        
        "12. 1inch\n"
        "1inch.io\n"
        "–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä DEX ‚Äî –∏—â–µ—Ç –ª—É—á—à–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö.\n\n"
        
        "13. Zapper\n"
        "zapper.fi\n"
        "–£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è DeFi-–ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏.\n\n"
        
        "14. Cryptopanic\n"
        "cryptopanic.com\n"
        "–ê–≥—Ä–µ–≥–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞ ‚Äî —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π.\n\n"
        
        "15. CoinPaprika\n"
        "coinpaprika.com \n"
        "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ CoinMarketCap —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ ICO –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º.\n\n"
    )
    elif text == "ü•º –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏":
        await message.answer("" \
        "üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–æ:" \
        "1. –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞(—Å–∫—Ä–∏–Ω—ã, —Ñ–∞–π–ª—ã). "
        "2. –õ—é–±–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ = –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –±–∞–Ω –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π." \
        "3. –û–±–∂–∞–ª–æ–≤–∞—Ç—å –±–∞–Ω –º–æ–∂–Ω–æ –∑–¥–µ—Å—å -- @zxc_admin993 ")
    elif text == "üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await message.answer("–û—Ç–∑—ã–≤ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–¥–µ—Å—å --- https://t.me/+iFEDdF8sJt03NjUy", reply_markup=main_menu_kb)
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", reply_markup=main_menu_kb)

async def password_handler(message: Message):
    user_id = str(message.from_user.id)
    

    if user_id not in users_db:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start —Å–Ω–∞—á–∞–ª–∞.")
        return

    if users_db[user_id]["verified"]:
        await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=main_menu_kb)
        return

    entered_password = message.text.strip()
    correct_password = users_db[user_id]["password"]

    if entered_password == correct_password:
        users_db[user_id]["verified"] = True
        save_users(users_db)
        await message.answer(
            "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.",
            reply_markup=main_menu_kb
        )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())